const { Telegraf } = require("telegraf");
const dotenv = require("dotenv");
dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.command("start", (ctx) => {
  ctx.reply(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
              web_app: { url: process.env.WEBAPP_URL },
            },
          ],
        ],
      },
    }
  );
});

bot.on("message", async (ctx) => {
  if (!ctx.message.web_app_data) return;

  try {
    const data = JSON.parse(ctx.message.web_app_data.data);
    await ctx.reply(
      `üéâ –í—ã –Ω–∞–±—Ä–∞–ª–∏ ${data.score} –∏–∑ ${data.total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑",
                web_app: { url: process.env.WEBAPP_URL },
              },
            ],
          ],
        },
      }
    );
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞:", e);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.");
  }
});

// –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –î–ª—è Railway –≤–∞–∂–Ω–æ —è–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}).catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
  process.exit(1);
});

const { Telegraf } = require("telegraf");
const dotenv = require("dotenv");
dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.command("start", (ctx) => {
  ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", web_app: { url: process.env.WEBAPP_URL } }]
      ]
    }
  });
});

bot.on("message", async (ctx) => {
  if (!ctx.message.web_app_data) return;

  try {
    const data = JSON.parse(ctx.message.web_app_data.data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
    await ctx.reply(`üéâ –í—ã –Ω–∞–±—Ä–∞–ª–∏ ${data.score} –∏–∑ ${data.total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!`);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    await ctx.answerWebApp("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"); // –≠—Ç–æ –∑–∞–∫—Ä–æ–µ—Ç WebApp

  } catch (e) {
    console.error("–û—à–∏–±–∫–∞:", e);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.");
  }
});

bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");